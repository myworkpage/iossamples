using Microsoft.Owin;
using Microsoft.Owin.Security;
using Microsoft.Owin.Security.Cookies;
using Owin;
using Owin.Security.Providers.PingFederate;
using Owin.Security.Providers.PingFederate.Provider;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Web.Helpers;
using AuthenticationMode = Microsoft.Owin.Security.AuthenticationMode;

namespace Bcbsla.DirectEnroll.Web.App_Start
{
    public static class AuthConfig
    {
        private static PingSettingsConfig _pingAppSettings;

        public static void ConfigureAuth(IAppBuilder app)
        {
            _pingAppSettings = new PingSettingsConfig();
            AntiForgeryConfig.UniqueClaimTypeIdentifier = _pingAppSettings.UniqueClaimTypeIdentifier;

            app.SetDefaultSignInAsAuthenticationType(_pingAppSettings.CookieAuthenticationType);

            app.UseKentorOwinCookieSaver();
            app.UseCookieAuthentication(
                new CookieAuthenticationOptions
                {
                    LoginPath = new PathString("/"),
                    AuthenticationMode = AuthenticationMode.Active,
                    AuthenticationType = _pingAppSettings.CookieAuthenticationType,
                    ExpireTimeSpan = TimeSpan.FromMinutes(_pingAppSettings.SessionTimeout),
                    CookieSecure = CookieSecureOption.Always,
                    CookiePath = "/",
                    SlidingExpiration = true
                });

            app.UsePingFederateAuthentication(
                new PingFederateAuthenticationOptions
                {
                    ErrorPath = _pingAppSettings.ErrorUrlPath,
                    CallbackPath = _pingAppSettings.AuthCallbackPath,
                    ClientId = _pingAppSettings.ProducerClientId,
                    ClientSecret = _pingAppSettings.ProducerClientSecret,
                    RequestUserInfo = true,
                    AuthenticationMode = AuthenticationMode.Active,
                    Scope = _pingAppSettings.Scopes,
                    PingFederateUrl = _pingAppSettings.PingServerUrl,
                    DiscoverMetadata = true,

                    Endpoints =
                        new PingFederateAuthenticationEndpoints()
                        {
                            MetadataEndpoint = PingFederateAuthenticationOptions.OpenIdConnectMetadataEndpoint
                        },
                    SignInAsAuthenticationType = _pingAppSettings.CookieAuthenticationType,
                    Provider = new PingFederateAuthenticationProvider
                    {
                        OnAuthenticated = context =>
                        {
                            SetClientAuthenticatedContext(new JwtSecurityTokenHandler(), context);
                            return Task.FromResult(0);
                        },
                        OnReturnEndpoint = context => Task.FromResult(0),
                        OnAuthenticating = context =>
                        {
                            context.Request.PathBase = _pingAppSettings.PathBase;

                            context.Options.ClientId = context.OwinContext.Authentication.User.Claims.FirstOrDefault(c => c.Type.Equals("clientId")).Value;
                            context.Options.ClientSecret = context.OwinContext.Authentication.User.Claims.FirstOrDefault(c => c.Type.Equals("clientSecret")).Value;
                            return Task.FromResult(0);
                        },
                        OnTokenRequest = context => Task.FromResult(0)
                    },
                });
        }

        private static void SetClientAuthenticatedContext(JwtSecurityTokenHandler handler, PingFederateAuthenticatedContext context)
        {
            var claims = handler.ReadJwtToken(context.IdentityToken).Claims;

            AddRoles(claims, context);

            context.Identity.AddClaim(new Claim(ClaimTypes.Role, claims.ToList().Find(c => c.Type == "aud")?.Value));
            context.Identity.AddClaim(new Claim(_pingAppSettings.UniqueClaimTypeIdentifier, Guid.NewGuid().ToString()));

            context.Identity.AddClaim(new Claim(ClaimTypes.Name, claims.FirstOrDefault(c => c.Type.Equals("sAMAccountName"))?.Value));
        }

        public static void AddRoles(IEnumerable<Claim> claims, PingFederateAuthenticatedContext context)
        {
            var memOf = claims.ToList().Find(c => c.Type == "memberOf")?.Value;

            if (memOf != null)
            {
                char[] charSeparators = new char[] { '[', ',', ']', '\"' };

                var roles = memOf.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries).ToList();

                roles.ForEach(x => context.Identity.AddClaim(new Claim(ClaimTypes.Role, x)));
            }
        }
    }
}



using Microsoft.Owin;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Web.Configuration;

namespace Bcbsla.DirectEnroll.Web.App_Start
{
    public class PingSettingsConfig
    {
        private readonly NameValueCollection _appSettings = WebConfigurationManager.AppSettings;

        public PathString PathBase => new PathString(_appSettings["ping:PathBase"]);
        public PathString AuthCallbackPath => new PathString(_appSettings["ping:AuthCallbackPath"]);
        public string ErrorUrlPath => _appSettings["ping:ErrorUrlPath"];
        public IList<string> Scopes => _appSettings["ping:Scopes"]?.Split(' ');
        public string PingServerUrl => _appSettings["ping:ServerUrl"];
        public double SessionTimeout => string.IsNullOrWhiteSpace(_appSettings["ping:SessionTimeout"])
                                 ? 15 : Convert.ToDouble(_appSettings["ping:SessionTimeout"]);
        public string UniqueClaimTypeIdentifier => _appSettings["ping:UniqueClaimTypeIdentifier"];
        public string CookieAuthenticationType => _appSettings["ping:CookieAuthenticationType"];

        // Producer Configurations
        public string ProducerClientId => _appSettings["ping:ProducerClientId"];
        public string ProducerClientSecret => _appSettings["ping:ProducerClientSecret"];

        // Consumer Configurations
        public string ConsumerClientId => _appSettings["ping:ConsumerClientId"];
        public string ConsumerClientSecret => _appSettings["ping:ConsumerClientSecret"];

        // Internal Configurations
        public string InternalClientSecret => _appSettings["ping:InternalClientSecret"];
        public string InternalClientId => _appSettings["ping:InternalClientId"];
    }
}
