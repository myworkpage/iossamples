trigger:
  branches:
    include:
      - master
      - feat/*
  paths:
    include:
      - src/app/*
    exclude:
      - src/api/*

jobs:
  - job: Android_Uat
    displayName: 'Build and Distribute Android UAT'
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: UseDotNet@2
      inputs:
        displayName: 'Use .NET from global.json'
        useGlobalJson: true

    - task: CmdLine@2
      displayName: 'Install MAUI Workload'
      inputs:
        script: 'dotnet workload install maui'

    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '/src/api/*'
        RemoveSourceFolder: true

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: DotNetCoreCLI@2
      displayName: 'Build Android UAT Project'
      inputs:
        command: 'build'
        projects: 'src/app/Bcbsla.Mobile.App.Droid/Bcbsla.Mobile.App.Droid.csproj'
        arguments: '-c Release_Test -f:net9.0-android35.0'

    - task: CopyFiles@2
      displayName: 'Copy AAB to Staging'
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**/*-Signed.aab'
        TargetFolder: '$(build.artifactstagingdirectory)/UAT'
        flattenFolders: true

    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '20.x'

    - task: DownloadSecureFile@1
      name: downloadFirebaseJson
      displayName: 'Download Firebase Service Account JSON'
      inputs:
        secureFile: 'android-firebase-uat.json'

    - task: PowerShell@2
      displayName: 'Distribute AAB via Firebase REST API (No gcloud)'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          $jsonPath = "$(downloadFirebaseJson.secureFilePath)"
          Write-Host "üîç Reading service account from: $jsonPath"
          $creds = Get-Content $jsonPath | ConvertFrom-Json

          $jwtHeaderRaw = (@{ alg = "RS256"; typ = "JWT" } | ConvertTo-Json -Compress)
          Write-Host "\nüì¶ JWT Header JSON:"
          Write-Host $jwtHeaderRaw

          Write-Host "\n JWT Header Full Name"
          Write-Host $jwtHeaderRaw.GetType().FullName

          $now = [int][double]::Parse((Get-Date -UFormat %s))
          $exp = $now + 3600
          $scope = "https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/firebase"
          $audience = "https://oauth2.googleapis.com/token"

          $jwtClaimSetRaw = (@{
            iss   = $creds.client_email
            scope = $scope
            aud   = $audience
            exp   = $exp
            iat   = $now
          } | ConvertTo-Json -Compress)

          Write-Host "\nüì¶ JWT Claims JSON:"
          Write-Host $jwtClaimSetRaw

          Write-Host "\n JWT Claims Full Name"
          Write-Host $jwtClaimSetRaw.GetType().FullName

          $jwtHeader = [string]$jwtHeaderRaw
          $jwtClaimSet = [string]$jwtClaimSetRaw

          Write-Host "\nForced JWT Header JSON Type:"
          Write-Host $jwtHeader.GetType().FullName
          Write-Host "\nForced JWT Claims JSON Type:"
          Write-Host $jwtClaimSet.GetType().FullName

          function Base64UrlEncode {
              param([string]$inputParam)
              Write-Host "\nüîé Entered Base64UrlEncode()"
              Write-Host "üîé Input value: $inputParam"
              Write-Host "üîé Input type: $($inputParam.GetType().FullName)"

              $utf8Bytes = [System.Text.Encoding]::UTF8.GetBytes($inputParam)
              return [Convert]::ToBase64String($utf8Bytes).TrimEnd('=') -replace '\+', '-' -replace '/', '_'
          }

          $headerEncoded = Base64UrlEncode -inputParam $jwtHeader
          $claimsEncoded = Base64UrlEncode -inputParam $jwtClaimSet
          $toSign = "$headerEncoded.$claimsEncoded"

          Write-Host "\nüîê Encoded Header:"
          Write-Host $headerEncoded
          Write-Host "\nüîê Encoded Claims:"
          Write-Host $claimsEncoded
          Write-Host "\nüß© Data to Sign (Header.Claims):"
          Write-Host $toSign

          $privateKeyPem = $creds.private_key -replace '-----.*?-----', '' -replace '\s+', ''
          $privateKeyBytes = [Convert]::FromBase64String($privateKeyPem)

          Write-Host "\nüîë Decoded Private Key Bytes Length:"
          Write-Host $privateKeyBytes.Length

          try {
            $rsa = [System.Security.Cryptography.RSA]::Create()
            [int]$bytesRead = 0
            $rsa.ImportPkcs8PrivateKey($privateKeyBytes, [ref]$bytesRead)
            Write-Host "\n‚úÖ RSA Key Imported Successfully (Bytes Read: $bytesRead)"

            $dataToSign = [System.Text.Encoding]::UTF8.GetBytes($toSign)
            Write-Host "\nüìè Data to Sign (Byte Length): $($dataToSign.Length)"

            $signature = $rsa.SignData(
              $dataToSign,
              [System.Security.Cryptography.HashAlgorithmName]::SHA256,
              [System.Security.Cryptography.RSASignaturePadding]::Pkcs1
            )

            Write-Host "\nüñäÔ∏è Raw Signature Bytes Length: $($signature.Length)"

            $signatureEncoded = [Convert]::ToBase64String($signature).TrimEnd('=') -replace '\+','-' -replace '/','_'
            Write-Host "\nüßæ Encoded Signature:"
            Write-Host $signatureEncoded

            $jwt = "$toSign.$signatureEncoded"
            Write-Host "\n‚úÖ Final JWT (first 200 chars):"
            Write-Host $jwt.Substring(0, [Math]::Min(200, $jwt.Length)) "... (truncated)"

            $jwt | Set-Content -Path "./jwt.txt" -Encoding ascii
            Write-Host "\nüìÑ Full JWT written to jwt.txt"
          } catch {
            Write-Error "‚ùå Failed to sign JWT: $_"
            exit 1
          }

          $tokenResponse = Invoke-RestMethod -Method Post -Uri $audience -ContentType 'application/x-www-form-urlencoded' -Body @{
            grant_type = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
            assertion  = $jwt
          }

          $accessToken = $tokenResponse.access_token
          if (-not $accessToken) {
            Write-Error "‚ùå Failed to retrieve access token."
            exit 1
          }

          Write-Host "‚úÖ Access token acquired."

          $aabFile = Get-ChildItem "$(Build.ArtifactStagingDirectory)/UAT" -Filter "*-Signed.aab" | Select-Object -First 1
          if (-not $aabFile) {
            Write-Error "‚ùå No signed AAB file found."
            exit 1
          }

          Write-Host "Found AAB: $($aabFile.FullName)"

          $headers = @{
            "Authorization"             = "Bearer $accessToken"
            "X-Goog-Upload-Protocol"    = "raw"
            "X-Goog-Upload-File-Name"   = "$($aabFile.Name)"
            "Content-Type"              = "application/octet-stream"
          }

          $uri = "https://firebaseappdistribution.googleapis.com/v1/projects/-/apps/$(FirebaseAppId_UAT)/releases:upload"

          try {
            $response = Invoke-RestMethod -Uri $uri -Method POST -Headers $headers -InFile $aabFile.FullName
            Write-Host "‚úÖ Uploaded to Firebase: $($response.name)"
          } catch {
            Write-Error "‚ùå Upload failed: $_"
            exit 1
          }
      env:
        FirebaseAppId_UAT: $(FirebaseAppId_UAT)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish UAT Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/UAT'
        ArtifactName: 'drop_uat'
        publishLocation: 'Container'
