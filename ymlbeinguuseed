trigger:
  branches:
    include:
      - master
      - feat/*
  paths:
    include:
      - src/app/*
    exclude:
      - src/api/*

jobs:
  - job: Android_Uat
    displayName: 'Build and Distribute Android UAT'
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: UseDotNet@2
      inputs:
        displayName: 'Use .NET from global.json'
        useGlobalJson: true

    - task: CmdLine@2
      displayName: 'Install MAUI Workload'
      inputs:
        script: 'dotnet workload install maui'

    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '/src/api/*'
        RemoveSourceFolder: true

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: DotNetCoreCLI@2
      displayName: 'Build Android UAT Project'
      inputs:
        command: 'build'
        projects: 'src/app/Bcbsla.Mobile.App.Droid/Bcbsla.Mobile.App.Droid.csproj'
        arguments: '-c Release_Test -f:net9.0-android35.0'

    - task: CopyFiles@2
      displayName: 'Copy AAB to Staging'
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**/*-Signed.aab'
        TargetFolder: '$(build.artifactstagingdirectory)/UAT'
        flattenFolders: true

    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '20.x'

    - script: |
        echo Installing Firebase CLI...
        npm install -g firebase-tools

        echo Setting Firebase App ID and Token...
        $env:AppId = "$(FirebaseAppId_UAT)"
        $env:Token = "$(FirebaseToken_UAT)"

        echo Checking for AAB file in: $(Build.ArtifactStagingDirectory)\UAT
        Get-ChildItem "$(Build.ArtifactStagingDirectory)\UAT"

        $aabPath = Get-ChildItem "$(Build.ArtifactStagingDirectory)\UAT\*-Signed.aab" | Select-Object -First 1

        if ($null -eq $aabPath) {
          Write-Error "‚ùå No signed AAB file found to distribute."
          exit 1
        }

        echo Distributing AAB to Firebase...
        firebase appdistribution:distribute "$($aabPath.FullName)" `
          --app $env:AppId `
          --token $env:Token `
          --groups uat_qa
      displayName: 'Install Firebase CLI and Distribute AAB'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish UAT Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/UAT'
        ArtifactName: 'drop_uat'
        publishLocation: 'Container' 

  - job: Android_Prod
    pool:
      vmImage: 'windows-latest'
    steps:

    - task: UseDotNet@2
      inputs:
        displayName: 'Use version of .NET in global.json'
        useGlobalJson: true

    - task: CmdLine@2
      inputs:
        script: 'dotnet workload install maui'

    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '/src/api/*'
        RemoveSourceFolder: true

    - task: CmdLine@2
      displayName: 'Swap google-services json files'
      inputs:
        script: 'mv src/app/Bcbsla.Mobile.App.Droid/google-services.Prod.json src/app/Bcbsla.Mobile.App.Droid/google-services.json'            

    - task: CmdLine@2
      displayName: 'Swap strings.xml files'
      inputs:
        script: 'mv src/app/Bcbsla.Mobile.App.Droid/Resources/values/strings.Prod.xml src/app/Bcbsla.Mobile.App.Droid/Resources/values/strings.xml'  

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/app/Bcbsla.Mobile.App.Droid/Bcbsla.Mobile.App.Droid.csproj'
        arguments: '-c Release_GooglePlay -f:net9.0-android35.0 -p:AndroidSigningKeyPass=$(KeystorePassword) -p:AndroidSigningStorePass=$(KeystorePassword)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**/*-Signed.aab'
        TargetFolder: '$(build.artifactstagingdirectory)/PROD'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/PROD'
        ArtifactName: 'drop_prod'
        publishLocation: 'Container'


