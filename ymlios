trigger:
  branches:
    include:
      - master
      - feat/*
  paths:
    include:
      - src/app/*
    exclude:
      - src/api/*

variables:
  - name: binFolder
    value: 'src/app/Bcbsla.Mobile.App.IOS/bin/'
  - name: dotNetVersion
    value: 'net9.0-ios'
  - name: architectureType
    value: 'ios-arm64'
  - group: member-mobile-app-ci  # includes FirebaseToken_UAT as a secret

jobs:
  - job: IOS_Uat
    displayName: "üöÄ iOS UAT Build and Firebase Upload"
    pool:
      vmImage: 'macos-15'
    steps:
      - task: PowerShell@2
        displayName: Set Xcode v16.3
        inputs:
          targetType: 'inline'
          script: |
            sudo xcode-select -s /Applications/Xcode_16.3.app
            xcrun xcode-select --print-path

      - task: CmdLine@2
        displayName: Check Xcode Version
        inputs:
          script: 'xcodebuild -version'

      - task: UseDotNet@2
        displayName: Use .NET SDK from global.json
        inputs:
          useGlobalJson: true

      - task: CmdLine@2
        displayName: Install .NET MAUI for iOS
        inputs:
          script: 'dotnet workload install maui ios --version 9.0.203'

      - task: InstallAppleCertificate@2
        displayName: Install Apple Distribution Certificate
        inputs:
          certSecureFile: 'DistributionCertificate.p12'
          certPwd: '$(CertificatePassword)'

      - task: InstallAppleProvisioningProfile@1
        displayName: Install Provisioning Profile
        inputs:
          provisioningProfileLocation: 'sourceRepository'
          provProfileSourceRepository: 'src/app/Bcbslax_AdHoc_profile.mobileprovision'
          removeProfile: true

      - task: DotNetCoreCLI@2
        displayName: Build and Publish iOS App
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: 'src/app/Bcbsla.Mobile.App.IOS/Bcbsla.Mobile.App.IOS.csproj'
          arguments: '-c Release_Test -f net9.0-ios /p:BuildIpa=true /p:RuntimeIdentifier=ios-arm64 /p:IsPublishing=true'

      - task: CopyFiles@2
        displayName: Copy IPA to Staging Directory
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/src/app/Bcbsla.Mobile.App.IOS/bin/Release_Test/net9.0-ios/ios-arm64/publish'
          Contents: '**/*.ipa'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/UAT'
          flattenFolders: true

      - task: ArchiveFiles@2
        displayName: Archive dSYM Symbols
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/$(binFolder)/Release_Test/$(dotNetVersion)/$(architectureType)/Bcbsla.Mobile.App.IOS.app.dSYM'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/UAT/Bcbsla.Mobile.App.IOS.app.dSYM.UAT-$(Build.BuildId).zip'
          verbose: true

      - task: Bash@3
        displayName: Install Firebase CLI
        inputs:
          targetType: 'inline'
          script: |
            curl -sL https://firebase.tools | bash

      - task: Bash@3
        displayName: üì§ Upload IPA to Firebase App Distribution (UAT)
        inputs:
          targetType: 'inline'
          script: |
            export FIREBASE_TOKEN=$(FirebaseToken_UAT)

            if [ -z "$FIREBASE_TOKEN" ]; then
              echo "‚ùå Firebase token is missing!"
              exit 1
            fi

            ipa_path=$(find "$(Build.ArtifactStagingDirectory)/UAT" -name "*.ipa" | head -n 1)

            if [ -z "$ipa_path" ]; then
              echo "‚ùå IPA file not found in UAT folder!"
              exit 1
            fi

            echo "‚úÖ Found IPA: $ipa_path"

            firebase appdistribution:distribute "$ipa_path" \
              --app "1:658107755795:ios:0a47d2f3e85903eb273ee6" \
              --release-notes "Automated UAT CI Build $(Build.BuildId)" \
              --groups "uat_qa" \
              --token "$FIREBASE_TOKEN"

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifacts for UAT
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/UAT'
          ArtifactName: 'drop_uat'
          publishLocation: 'Container'
