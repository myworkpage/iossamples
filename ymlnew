trigger:
  branches:
    include:
      - master
      - feat/*
  paths:
    include:
      - src/app/*
    exclude:
      - src/api/*

jobs:
  - job: Android_Uat
    displayName: 'Build and Distribute Android UAT'
    pool:
      vmImage: 'windows-latest'

    steps:
    - task: UseDotNet@2
      inputs:
        displayName: 'Use .NET from global.json'
        useGlobalJson: true

    - task: CmdLine@2
      displayName: 'Install MAUI Workload'
      inputs:
        script: 'dotnet workload install maui'

    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '/src/api/*'
        RemoveSourceFolder: true

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: DotNetCoreCLI@2
      displayName: 'Build Android UAT Project'
      inputs:
        command: 'build'
        projects: 'src/app/Bcbsla.Mobile.App.Droid/Bcbsla.Mobile.App.Droid.csproj'
        arguments: '-c Release_Test -f:net9.0-android35.0'

    - task: CopyFiles@2
      displayName: 'Copy AAB to Staging'
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**/*-Signed.aab'
        TargetFolder: '$(build.artifactstagingdirectory)/UAT'
        flattenFolders: true

    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '20.x'

    - task: DownloadSecureFile@1
      name: downloadFirebaseJson
      displayName: 'Download Firebase Service Account JSON'
      inputs:
        secureFile: 'android-firebase-uat.json'

    - task: PowerShell@2
      displayName: 'Distribute AAB via Firebase REST API (No gcloud)'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          $jsonPath = "$(downloadFirebaseJson.secureFilePath)"
          Write-Host "Using service account file: $jsonPath"
    
          # Load credentials from JSON
          $creds = Get-Content $jsonPath | ConvertFrom-Json
          $jwtHeader = @{ alg = "RS256"; typ = "JWT" } | ConvertTo-Json -Compress
          $now = [int][double]::Parse((Get-Date -UFormat %s))
          $exp = $now + 3600
    
          $jwtClaimSet = @{
            iss = $creds.client_email
            scope = "https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/firebase"
            aud = $creds.token_uri
            exp = $exp
            iat = $now
          } | ConvertTo-Json -Compress
    
          function Base64UrlEncode([string]$input) {
            [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($input)).TrimEnd('=').Replace('+', '-').Replace('/', '_')
          }
    
          $headerEncoded = Base64UrlEncode $jwtHeader
          $claimsEncoded = Base64UrlEncode $jwtClaimSet
          $toSign = "$headerEncoded.$claimsEncoded"
    
          # Write payload to temp file
          $toSignPath = "$env:TEMP\toSign.bytes"
          Set-Content -Path $toSignPath -Value $toSign -Encoding UTF8
    
          # Sign using private key
          $privateKeyPem = $creds.private_key -replace '-----.*?-----', '' -replace '\s+', ''
          $privateKey = [Convert]::FromBase64String($privateKeyPem)
          $rsa = [System.Security.Cryptography.RSA]::Create()
          $rsa.ImportRSAPrivateKey($privateKey, [ref]0)
          $signature = $rsa.SignData([System.Text.Encoding]::UTF8.GetBytes($toSign), [System.Security.Cryptography.HashAlgorithmName]::SHA256, [System.Security.Cryptography.RSASignaturePadding]::Pkcs1)
          $signatureEncoded = [Convert]::ToBase64String($signature).TrimEnd('=').Replace('+', '-').Replace('/', '_')
    
          $jwt = "$toSign.$signatureEncoded"
    
          # Get access token
          $tokenResponse = Invoke-RestMethod -Method Post -Uri $creds.token_uri -ContentType 'application/x-www-form-urlencoded' -Body @{
            grant_type = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
            assertion = $jwt
          }
    
          $accessToken = $tokenResponse.access_token
    
          # Upload AAB
          $aabFile = Get-ChildItem "$(Build.ArtifactStagingDirectory)\UAT\*-Signed.aab" | Select-Object -First 1
          if (-not $aabFile) {
            Write-Error "❌ No signed AAB file found."
            exit 1
          }
    
          $headers = @{
            "Authorization" = "Bearer $accessToken"
            "X-Goog-Upload-Protocol" = "raw"
            "X-Goog-Upload-File-Name" = "$($aabFile.Name)"
            "Content-Type" = "application/octet-stream"
          }
    
          $uri = "https://firebaseappdistribution.googleapis.com/v1/projects/-/apps/$(FirebaseAppId_UAT)/releases:upload"
          $response = Invoke-RestMethod -Uri $uri -Method POST -Headers $headers -InFile $aabFile.FullName
    
          Write-Output "✅ Uploaded to Firebase: $($response.name)"
      env:
        FirebaseAppId_UAT: $(FirebaseAppId_UAT)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish UAT Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/UAT'
        ArtifactName: 'drop_uat'
        publishLocation: 'Container'

  - job: Android_Prod
    pool:
      vmImage: 'windows-latest'
    steps:

    - task: UseDotNet@2
      inputs:
        displayName: 'Use version of .NET in global.json'
        useGlobalJson: true

    - task: CmdLine@2
      inputs:
        script: 'dotnet workload install maui'

    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '/src/api/*'
        RemoveSourceFolder: true

    - task: CmdLine@2
      displayName: 'Swap google-services json files'
      inputs:
        script: 'mv src/app/Bcbsla.Mobile.App.Droid/google-services.Prod.json src/app/Bcbsla.Mobile.App.Droid/google-services.json'            

    - task: CmdLine@2
      displayName: 'Swap strings.xml files'
      inputs:
        script: 'mv src/app/Bcbsla.Mobile.App.Droid/Resources/values/strings.Prod.xml src/app/Bcbsla.Mobile.App.Droid/Resources/values/strings.xml'  

    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/app/Bcbsla.Mobile.App.Droid/Bcbsla.Mobile.App.Droid.csproj'
        arguments: '-c Release_GooglePlay -f:net9.0-android35.0 -p:AndroidSigningKeyPass=$(KeystorePassword) -p:AndroidSigningStorePass=$(KeystorePassword)'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**/*-Signed.aab'
        TargetFolder: '$(build.artifactstagingdirectory)/PROD'
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/PROD'
        ArtifactName: 'drop_prod'
        publishLocation: 'Container'

